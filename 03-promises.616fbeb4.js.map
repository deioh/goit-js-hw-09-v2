{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAGnBI,EAAwBP,EAAxBI,MAAOI,EAAiBR,EAAjBK,KAAMI,EAAWT,EAAXM,OAqB3B,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFlB,EAAAsB,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAE7Dd,EAAAsB,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,GAE3DA,E,IA/B+BZ,EAA9BC,KAEHuB,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAEC,iBAIF,IAHA,IAAIC,EAAaC,OAAOrB,EAAMsB,OAGrBC,EAAgB,EAAGA,GAAiBrB,EAAOoB,MAAOC,IACzDpB,EAAcoB,EAAeH,GAC1BI,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUsB,EAAKD,EAAL5B,MACjBN,EAAAsB,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANW,EAAM,M,IAE9DC,OAAM,SAAAF,G,IAAGrB,EAAQqB,EAARrB,SAAUwB,EAAKH,EAAL5B,MAClBN,EAAAsB,OAAOG,QAAQ,sBAAuCD,OAAfX,EAAS,QAAYW,OAANa,EAAM,M,IAGlER,GAAcC,OAAOpB,EAAKqB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nconst { form, delay, step, amount } = refs;\n\nform.addEventListener('submit', promiseGenerator);\n\nfunction promiseGenerator(e) {\n  e.preventDefault();\n  let delayValue = Number(delay.value);\n  // let stepValue = Number(step.value);\n  // let amountValue = Number(amount.value);\n  for (let positionValue = 1; positionValue <= amount.value; positionValue++) {\n    createPromise(positionValue, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  delayValue += Number(step.value);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n\n    //   if (shouldResolve) {\n    //     // Fulfill\n    //   } else {\n    //     // Reject\n    //   }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","addEventListener","e","preventDefault","delayValue","Number","value","positionValue","then","param","delay1","catch","delay2"],"version":3,"file":"03-promises.616fbeb4.js.map"}